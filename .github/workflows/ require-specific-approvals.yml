  name: Check Required Approvals

  on:
    pull_request_review:
      types: [submitted]

  jobs:
    check-required-approvals:
      runs-on: ubuntu-latest
      if: github.event.review.state == 'approved'

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 1

        - name: Fetch changed files
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            echo "Получение списка измененных файлов из Pull Request..."
            gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' > changed_files.txt
            echo "Измененные файлы:"
            cat changed_files.txt

        - name: Fetch approval rules
          run: |
            echo "Загрузка правил утверждения..."
            cat .github/approval_rules.json

        - name: Fetch approved reviews from GitHub API
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            echo "Получение последних обзоров из GitHub API..."
            gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews > reviews.json

            echo "Обработка обзоров для получения последнего статуса от каждого рецензента..."
            FILTER='group_by(.user.login) | map(last) | .[] | select(.state == "APPROVED") | .user.login'
            jq -r "$FILTER" reviews.json | sort -u > approved_reviewers.txt

            echo "Список рецензентов, одобривших изменения:"
            cat approved_reviewers.txt

        - name: Make script executable
          run: chmod +x ./.github/scripts/check_required_approvals.js

        - name: Check if all required owners approved
          env:
            GH_TOKEN: ${{ secrets.GH_PAT }}
            GITHUB_REPOSITORY: ${{ github.repository }}
            PR_NUMBER: ${{ github.event.pull_request.number }}
          run: node ./.github/scripts/check_required_approvals.js
